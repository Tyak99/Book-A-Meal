{"version":3,"sources":["../../controllers/authController.js"],"names":["User","Model","tokenFunction","user","timestamp","Date","getTime","jwt","encode","sub","dataValues","id","iat","process","env","secret","exports","create","req","res","body","firstName","lastName","email","password","role","findOne","where","then","send","status","error","salt","bcrypt","genSaltSync","hash","hashSync","roleId","token","catch","login","name"],"mappings":";;AAAA;;AACA;;AACA;;;;IAEQA,I,GAASC,e,CAATD,I;;AAER,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC9B,MAAMC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,SAAOC,mBAAIC,MAAJ,CACL;AAAEC,IAAAA,GAAG,EAAEN,IAAI,CAACO,UAAL,CAAgBC,EAAvB;AAA2BC,IAAAA,GAAG,EAAER;AAAhC,GADK,EAELS,OAAO,CAACC,GAAR,CAAYC,MAFP,CAAP;AAID,CAND;;AAQAC,OAAO,CAACC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAC0BD,GAAG,CAACE,IAD9B;AAAA,MACrBC,SADqB,aACrBA,SADqB;AAAA,MACVC,QADU,aACVA,QADU;AAAA,MACAC,KADA,aACAA,KADA;AAAA,MACOC,QADP,aACOA,QADP;AAAA,MACiBC,IADjB,aACiBA,IADjB;AAE7BzB,EAAAA,IAAI,CAAC0B,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAALA;AAAF;AAAT,GAAb,EAAmCK,IAAnC,CAAwC,UAACzB,IAAD,EAAU;AAChD,QAAIA,IAAJ,EAAU;AACR,aAAOgB,GAAG,CAACU,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,KAAK,EAAE;AAFO,OAAT,CAAP;AAID;;AACD,QAAMC,IAAI,GAAGC,kBAAOC,WAAP,CAAmB,EAAnB,CAAb;;AACA,QAAMC,IAAI,GAAGF,kBAAOG,QAAP,CAAgBZ,QAAhB,EAA0BQ,IAA1B,CAAb;;AACAhC,IAAAA,IAAI,CAACiB,MAAL,CAAY;AACVI,MAAAA,SAAS,EAATA,SADU;AAEVC,MAAAA,QAAQ,EAARA,QAFU;AAGVC,MAAAA,KAAK,EAALA,KAHU;AAIVC,MAAAA,QAAQ,EAAEW,IAJA;AAKVE,MAAAA,MAAM,EAAEZ;AALE,KAAZ,EAOGG,IAPH,CAOQ,UAACzB,IAAD,EAAU;AACd,UAAMmC,KAAK,GAAGpC,aAAa,CAACC,IAAD,CAA3B;AACAgB,MAAAA,GAAG,CAACU,IAAJ,CAAS;AACPS,QAAAA,KAAK,EAALA;AADO,OAAT;AAGD,KAZH,EAaGC,KAbH,CAaS,UAACR,KAAD;AAAA,aAAWZ,GAAG,CAACU,IAAJ,CAASE,KAAT,CAAX;AAAA,KAbT;AAcD,GAvBD;AAwBD,CA1BD;;AA4BAf,OAAO,CAACwB,KAAR,GAAgB,UAACtB,GAAD,EAAMC,GAAN,EAAc;AAC5B;AACA;AACAA,EAAAA,GAAG,CAACU,IAAJ,CAAS;AACPY,IAAAA,IAAI,EAAEvB,GAAG,CAACf,IAAJ,CAASkB,SADR;AAEPiB,IAAAA,KAAK,EAAEpC,aAAa,CAACgB,GAAG,CAACf,IAAL;AAFb,GAAT;AAID,CAPD","sourcesContent":["import bcrypt from 'bcryptjs';\nimport jwt from 'jwt-simple';\nimport Model from '../models';\n\nconst { User } = Model;\n\nconst tokenFunction = (user) => {\n  const timestamp = new Date().getTime();\n  return jwt.encode(\n    { sub: user.dataValues.id, iat: timestamp },\n    process.env.secret,\n  );\n};\n\nexports.create = (req, res) => {\n  const { firstName, lastName, email, password, role } = req.body;\n  User.findOne({ where: { email } }).then((user) => {\n    if (user) {\n      return res.send({\n        status: 400,\n        error: 'User with email already exist',\n      });\n    }\n    const salt = bcrypt.genSaltSync(10);\n    const hash = bcrypt.hashSync(password, salt);\n    User.create({\n      firstName,\n      lastName,\n      email,\n      password: hash,\n      roleId: role,\n    })\n      .then((user) => {\n        const token = tokenFunction(user);\n        res.send({\n          token,\n        });\n      })\n      .catch((error) => res.send(error));\n  });\n};\n\nexports.login = (req, res) => {\n  // User is already verified before they get here\n  // so here i need to give the user token\n  res.send({\n    name: req.user.firstName,\n    token: tokenFunction(req.user),\n  });\n};\n"],"file":"authController.js"}