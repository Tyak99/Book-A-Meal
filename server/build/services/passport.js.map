{"version":3,"sources":["../../services/passport.js"],"names":["require","config","User","Model","LocalOption","usernameField","localLogin","LocalStrategy","email","password","done","findOne","where","then","user","hash","bcrypt","compare","err","res","catch","error","JwtOptions","jwtFromRequest","ExtractJwt","fromHeader","secretOrKey","process","env","secret","JwtLogin","Strategy","payload","findById","sub","passport","use"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;IAEQC,I,GAASC,e,CAATD,I;AAER,IAAME,WAAW,GAAG;AAAEC,EAAAA,aAAa,EAAE;AAAjB,CAApB;AAEA,IAAMC,UAAU,GAAG,IAAIC,sBAAJ,CAAkBH,WAAlB,EAA+B,UAACI,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC3ER,EAAAA,IAAI,CAACS,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAALA;AAAF;AAAT,GAAb,EACGK,IADH,CACQ,UAACC,IAAD,EAAU;AACd,QAAI,CAACA,IAAL,EAAW;AACTJ,MAAAA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAJ;AACD,KAFD,MAEO;AACL,UAAMK,IAAI,GAAGD,IAAI,CAACL,QAAlB;;AACAO,wBAAOC,OAAP,CAAeR,QAAf,EAAyBM,IAAzB,EAA+B,UAACG,GAAD,EAAMC,GAAN,EAAc;AAC3C;AACA,YAAIA,GAAG,KAAK,KAAZ,EAAmB;AACjBT,UAAAA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAJ;AACD,SAFD,MAEO;AACLA,UAAAA,IAAI,CAAC,IAAD,EAAOI,IAAP,CAAJ;AACD;AACF,OAPD;AAQD;AACF,GAfH,EAgBGM,KAhBH,CAgBS,UAACC,KAAD;AAAA,WAAWX,IAAI,CAAC,IAAD,EAAOW,KAAP,CAAf;AAAA,GAhBT;AAiBD,CAlBkB,CAAnB;AAoBA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,cAAc,EAAEC,wBAAWC,UAAX,CAAsB,eAAtB,CADC;AAEjBC,EAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFR,CAAnB;AAKA,IAAMC,QAAQ,GAAG,IAAIC,qBAAJ,CAAaT,UAAb,EAAyB,UAACU,OAAD,EAAUtB,IAAV,EAAmB;AAC3D;AACAR,EAAAA,IAAI,CAAC+B,QAAL,CAAcD,OAAO,CAACE,GAAtB,EACGrB,IADH,CACQ,UAACC,IAAD,EAAU;AACd,QAAIA,IAAJ,EAAU;AACR;AACAJ,MAAAA,IAAI,CAAC,IAAD,EAAOI,IAAP,CAAJ;AACD,KAHD,MAGO;AACL;AACAJ,MAAAA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAJ;AACD;AACF,GATH,EAUGU,KAVH,CAUS,UAACC,KAAD;AAAA,WAAWX,IAAI,CAAC,IAAD,EAAOW,KAAP,CAAf;AAAA,GAVT;AAWD,CAbgB,CAAjB;;AAeAc,kBAASC,GAAT,CAAaN,QAAb;;AACAK,kBAASC,GAAT,CAAa9B,UAAb","sourcesContent":["import passport from 'passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport LocalStrategy from 'passport-local';\nimport bcrypt from 'bcryptjs';\n\nimport Model from '../models';\n\nrequire('dotenv').config();\n\nconst { User } = Model;\n\nconst LocalOption = { usernameField: 'email' };\n\nconst localLogin = new LocalStrategy(LocalOption, (email, password, done) => {\n  User.findOne({ where: { email } })\n    .then((user) => {\n      if (!user) {\n        done(null, false);\n      } else {\n        const hash = user.password;\n        bcrypt.compare(password, hash, (err, res) => {\n          // res === true\n          if (res === false) {\n            done(null, false);\n          } else {\n            done(null, user);\n          }\n        });\n      }\n    })\n    .catch((error) => done(null, error));\n});\n\nconst JwtOptions = {\n  jwtFromRequest: ExtractJwt.fromHeader('authorization'),\n  secretOrKey: process.env.secret,\n};\n\nconst JwtLogin = new Strategy(JwtOptions, (payload, done) => {\n  //see if user id in the payload exists in the database\n  User.findById(payload.sub)\n    .then((user) => {\n      if (user) {\n        //if it does call done with that user\n        done(null, user);\n      } else {\n        //otherwise call done without a user object\n        done(null, false);\n      }\n    })\n    .catch((error) => done(null, error));\n});\n\npassport.use(JwtLogin);\npassport.use(localLogin);\n"],"file":"passport.js"}